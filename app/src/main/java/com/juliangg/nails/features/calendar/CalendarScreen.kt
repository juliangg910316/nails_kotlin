package com.juliangg.nails.features.calendar

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CornerSize
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Card
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.himanshoe.kalendar.Kalendar
import com.himanshoe.kalendar.color.KalendarThemeColor
import com.himanshoe.kalendar.component.day.config.KalendarDayColors
import com.himanshoe.kalendar.model.KalendarEvent
import com.himanshoe.kalendar.model.KalendarType
import com.juliangg.nails.R

@Composable
fun CalendarScreen(
    calendarViewModel: CalendarViewModel = viewModel()
) {

    val calendarDayEventState by remember {
        calendarViewModel.calendarDayEventState
    }
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(colorResource(id = R.color.white))
            .wrapContentSize(Alignment.TopCenter)
    ) {
        Kalendar(
            kalendarType = KalendarType.Firey,
            kalendarThemeColor = KalendarThemeColor(Color.White, Color.Blue, Color.Blue),
            kalendarDayColors = KalendarDayColors(Color.Black, Color.White),
            kalendarEvents = calendarViewModel.kalendarEvent,
            onCurrentDayClick = { a, b ->
                calendarViewModel.addCalendarDayEvent(CalendarDayEvent(kalendarDay = a, kalendarEventList = b))
            },
        )
        MyTurnList(turnList = calendarDayEventState.getCalendarDayEventList())
    }
}

@Composable
fun MyTurnList(modifier: Modifier = Modifier,turnList: List<KalendarEvent>) {
    LazyColumn(
        modifier = modifier
            .padding(16.dp)
            .fillMaxWidth()
    ) {
        items(turnList) {
            data -> MySimpleListItem(event = data)
        }
    }
}

// The UI for each list item can be generated by a reusable composable
@Composable
fun MySimpleListItem(event: KalendarEvent) {
    Card(
        modifier = Modifier
            .padding(horizontal = 8.dp, vertical = 8.dp)
            .fillMaxWidth(),
        elevation = 2.dp,
        backgroundColor = Color.White,
        shape = RoundedCornerShape(corner = CornerSize(16.dp))
    ) {
        Row(
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
           Column (
               modifier = Modifier
                   .padding(16.dp)
                   .align(Alignment.CenterVertically)
           ) {
               Text(text = event.eventName, style = MaterialTheme.typography.h6)
               Text(text = "55442211", style = MaterialTheme.typography.caption)
           }
            Text(
                text = event.eventDescription?:"",
                style = MaterialTheme.typography.caption,
                modifier = Modifier
                    .padding(16.dp)
                    .align(Alignment.CenterVertically)
            )
        }
    }
}