package com.juliangg.nails.features.calendar

import android.content.Context
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CornerSize
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import com.himanshoe.kalendar.Kalendar
import com.himanshoe.kalendar.color.KalendarThemeColor
import com.himanshoe.kalendar.component.day.config.KalendarDayColors
import com.himanshoe.kalendar.model.KalendarType
import com.juliangg.nails.R
import com.juliangg.nails.database.turn.Turn
import com.juliangg.nails.ui.theme.*
import com.juliangg.nails.widgets.EditTurnDialog

@Composable
fun CalendarScreen() {
    // Context to toast a message
    val ctx: Context = LocalContext.current

    val calendarViewModel = hiltViewModel<CalendarViewModel>()

    // Dialog state Manager
    val dialogState: MutableState<Boolean> = remember {
        mutableStateOf(false)
    }
    val turnSelected by remember {
        mutableStateOf(null)
    }
    val turnsDay: List<Turn> by calendarViewModel.turnsDay.collectAsState(initial = emptyList())

    EditTurnDialog(dialogState = dialogState, turn = turnSelected)

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(colorResource(id = R.color.white))
            .wrapContentSize(Alignment.TopCenter)
    ) {
        Kalendar(
            kalendarType = KalendarType.Firey,
            kalendarThemeColor = KalendarThemeColor(Color.White, Blue800, Blue800),
            kalendarDayColors = KalendarDayColors(Color.Black, Color.White),
            kalendarEvents = calendarViewModel.kalendarEvent,
            onCurrentDayClick = { a, _ -> calendarViewModel.setDaySelected(kalendarDay = a) },
        )
        MyTurnList(turnList = turnsDay, dialogState = dialogState)
    }
}

@Composable
fun MyTurnList(
    modifier: Modifier = Modifier,
    turnList: List<Turn>,
    dialogState: MutableState<Boolean>
) {
    LazyColumn(
        modifier = modifier
            .padding(horizontal = 16.dp)
            .fillMaxWidth()
    ) {
        items(turnList) { data ->
            MySimpleListItem(event = data, dialogState = dialogState)
        }
    }
}

// The UI for each list item can be generated by a reusable composable
@OptIn(ExperimentalMaterialApi::class)
@Composable
fun MySimpleListItem(event: Turn, dialogState: MutableState<Boolean>) {
    Card(
        modifier = Modifier
            .padding(horizontal = 8.dp, vertical = 12.dp)
            .fillMaxWidth(),
        elevation = 10.dp,
        backgroundColor = Color.White,
        shape = RoundedCornerShape(corner = CornerSize(16.dp)),
        onClick = {
            dialogState.value = true
        }
    ) {
        Row(

        ) {
            Column(
                modifier = Modifier
                    .padding(16.dp)
                    .align(Alignment.CenterVertically)
            ) {
                Icon(
                    painter = painterResource(id = R.drawable.ic_baseline_timer_24),
                    contentDescription = ""
                )
                Text(
                    text = event.payPrevious,
                    style = MaterialTheme.typography.caption
                )
            }

            Column(
                modifier = Modifier
                    .padding(16.dp)
                    .align(Alignment.CenterVertically)
                    .weight(weight = 1f)
            ) {
                Text(text = event.nameClient, style = MaterialTheme.typography.h6)
                Text(text = event.phoneClient, style = MaterialTheme.typography.caption)
            }
            Icon(
                painter = painterResource(id = R.drawable.ic_baseline_navigate_next_24),
                contentDescription = "",
                modifier = Modifier
                    .padding(16.dp)
                    .align(Alignment.CenterVertically)
            )
        }
    }
}